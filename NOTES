Object serialisatie/deserialisatie voor AVS presets:

Add to AVSElement:

	VisList memoryLayout;

create an

AVSDataDescriptionEntry {
	AVSDataDescriptionType
	
	References to the target where the data is stored.
}

Have one common deserializer that uses the DataDescription table to fill the
structure, AND can use the same table to serialize it back into the preset.


Example for the descriptor:

However since we need to access the pal before initializer this could be tricky, but solved by some API

static const AVSDataDescriptionEntry datadescription[] = {
	AVS_DATA_DESCRIPTION_LIST_ENTRY_PALETTE (&pal),
	AVS_DATA_DESCRIPTION_LIST_END
};



AVSActorPlugin:
	Propogate special AVS stuff through parameters ?

// render function
// render should return 0 if it only used framebuffer, or 1 if the new output data is in fbout. this
// is
// used when you want to do something that you'd otherwise need to make a copy of the framebuffer.
// w and h are the width and height of the screen, in pixels.
// isBeat is 1 if a beat has been detected.
// visdata is in the format of [spectrum:0,wave:1][channel][band].

